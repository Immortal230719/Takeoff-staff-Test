// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginBtn should render correctly 1`] = `
<LoginBtn
  className="center"
  onClick={[Function]}
>
  <WithStyles(ForwardRef(Button))
    className="makeStyles-btnIn-1"
    endIcon={
      <UNDEFINED
        color="inherit"
        fontSize="large"
      />
    }
    onClick={[Function]}
    size="large"
    variant="contained"
  >
    <ForwardRef(Button)
      className="makeStyles-btnIn-1"
      classes={
        Object {
          "colorInherit": "MuiButton-colorInherit",
          "contained": "MuiButton-contained",
          "containedPrimary": "MuiButton-containedPrimary",
          "containedSecondary": "MuiButton-containedSecondary",
          "containedSizeLarge": "MuiButton-containedSizeLarge",
          "containedSizeSmall": "MuiButton-containedSizeSmall",
          "disableElevation": "MuiButton-disableElevation",
          "disabled": "Mui-disabled",
          "endIcon": "MuiButton-endIcon",
          "focusVisible": "Mui-focusVisible",
          "fullWidth": "MuiButton-fullWidth",
          "iconSizeLarge": "MuiButton-iconSizeLarge",
          "iconSizeMedium": "MuiButton-iconSizeMedium",
          "iconSizeSmall": "MuiButton-iconSizeSmall",
          "label": "MuiButton-label",
          "outlined": "MuiButton-outlined",
          "outlinedPrimary": "MuiButton-outlinedPrimary",
          "outlinedSecondary": "MuiButton-outlinedSecondary",
          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
          "root": "MuiButton-root",
          "sizeLarge": "MuiButton-sizeLarge",
          "sizeSmall": "MuiButton-sizeSmall",
          "startIcon": "MuiButton-startIcon",
          "text": "MuiButton-text",
          "textPrimary": "MuiButton-textPrimary",
          "textSecondary": "MuiButton-textSecondary",
          "textSizeLarge": "MuiButton-textSizeLarge",
          "textSizeSmall": "MuiButton-textSizeSmall",
        }
      }
      endIcon={
        <UNDEFINED
          color="inherit"
          fontSize="large"
        />
      }
      onClick={[Function]}
      size="large"
      variant="contained"
    >
      <WithStyles(ForwardRef(ButtonBase))
        className="MuiButton-root MuiButton-contained makeStyles-btnIn-1 MuiButton-containedSizeLarge MuiButton-sizeLarge"
        component="button"
        disabled={false}
        focusRipple={true}
        focusVisibleClassName="Mui-focusVisible"
        onClick={[Function]}
        type="button"
      >
        <ForwardRef(ButtonBase)
          className="MuiButton-root MuiButton-contained makeStyles-btnIn-1 MuiButton-containedSizeLarge MuiButton-sizeLarge"
          classes={
            Object {
              "disabled": "Mui-disabled",
              "focusVisible": "Mui-focusVisible",
              "root": "MuiButtonBase-root",
            }
          }
          component="button"
          disabled={false}
          focusRipple={true}
          focusVisibleClassName="Mui-focusVisible"
          onClick={[Function]}
          type="button"
        >
          <button
            className="MuiButtonBase-root MuiButton-root MuiButton-contained makeStyles-btnIn-1 MuiButton-containedSizeLarge MuiButton-sizeLarge"
            disabled={false}
            onBlur={[Function]}
            onClick={[Function]}
            onDragLeave={[Function]}
            onFocus={[Function]}
            onKeyDown={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseLeave={[Function]}
            onMouseUp={[Function]}
            onTouchEnd={[Function]}
            onTouchMove={[Function]}
            onTouchStart={[Function]}
            tabIndex={0}
            type="button"
          >
            <span
              className="MuiButton-label"
            >
              Login
              <span
                className="MuiButton-endIcon MuiButton-iconSizeLarge"
              >
                <ForwardRef
                  color="inherit"
                  fontSize="large"
                >
                  <WithStyles(ForwardRef(SvgIcon))
                    color="inherit"
                    fontSize="large"
                  >
                    <ForwardRef(SvgIcon)
                      classes={
                        Object {
                          "colorAction": "MuiSvgIcon-colorAction",
                          "colorDisabled": "MuiSvgIcon-colorDisabled",
                          "colorError": "MuiSvgIcon-colorError",
                          "colorPrimary": "MuiSvgIcon-colorPrimary",
                          "colorSecondary": "MuiSvgIcon-colorSecondary",
                          "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                          "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                          "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                          "root": "MuiSvgIcon-root",
                        }
                      }
                      color="inherit"
                      fontSize="large"
                    >
                      <svg
                        aria-hidden={true}
                        className="MuiSvgIcon-root MuiSvgIcon-fontSizeLarge"
                        focusable="false"
                        viewBox="0 0 24 24"
                      >
                        <path
                          d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm0 4c1.66 0 3 1.34 3 3s-1.34 3-3 3-3-1.34-3-3 1.34-3 3-3zm6 12H6v-1.4c0-2 4-3.1 6-3.1s6 1.1 6 3.1V19z"
                        />
                      </svg>
                    </ForwardRef(SvgIcon)>
                  </WithStyles(ForwardRef(SvgIcon))>
                </ForwardRef>
              </span>
            </span>
            <WithStyles(memo)
              center={false}
            >
              <ForwardRef(TouchRipple)
                center={false}
                classes={
                  Object {
                    "child": "MuiTouchRipple-child",
                    "childLeaving": "MuiTouchRipple-childLeaving",
                    "childPulsate": "MuiTouchRipple-childPulsate",
                    "ripple": "MuiTouchRipple-ripple",
                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                    "root": "MuiTouchRipple-root",
                  }
                }
              >
                <span
                  className="MuiTouchRipple-root"
                >
                  <TransitionGroup
                    childFactory={[Function]}
                    component={null}
                    exit={true}
                  />
                </span>
              </ForwardRef(TouchRipple)>
            </WithStyles(memo)>
          </button>
        </ForwardRef(ButtonBase)>
      </WithStyles(ForwardRef(ButtonBase))>
    </ForwardRef(Button)>
  </WithStyles(ForwardRef(Button))>
</LoginBtn>
`;
